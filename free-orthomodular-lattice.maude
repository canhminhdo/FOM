mod FOM-SIGNATURE is
    sort Lattice .

    ops bot top : -> Lattice [ctor] .
    op qnot_ : Lattice -> Lattice [prec 31] .
    op _qand_ : Lattice Lattice -> Lattice [assoc comm prec 32] .
    op _qor_ : Lattice Lattice -> Lattice [assoc comm prec 33] .
endm

mod FOM is
    pr FOM-SIGNATURE .

    vars P Q R : Lattice .

    --- Idempotent laws
    eq P qand P = P .
    eq P qor P = P .

    --- Absorptive laws
    eq P qand (P qor Q) = P .
    eq P qor (P qand Q) = P .

    --- Involution
    eq qnot top = bot .
    eq qnot bot = top .
    eq qnot(qnot P) = P .

    --- Complements
    eq P qand qnot P = bot .
    eq P qor qnot P = top .

    --- Identities
    eq P qand top = P .
    eq P qand bot = bot .
    eq P qor bot = P .
    eq P qor top = top .

    --- De Morgan's laws with left <-> right
    rl [demorgan1] : qnot(P qand Q) => qnot P qor qnot Q .
    rl [demorgan2] : qnot(P qor Q) => qnot P qand qnot Q .
    rl [demorgan3] : qnot P qor qnot Q => qnot(P qand Q) .
    rl [demorgan4] : qnot P qand qnot Q => qnot(P qor Q) .
    --- De Morgan's laws with left -> right only
    --- eq qnot(P qand Q) = qnot P qor qnot Q .
    --- eq qnot(P qor Q) = qnot P qand qnot Q .
    --- eq (P qand Q) qor (qnot P qor qnot Q) = top .
    --- eq (P qand Q) qand (qnot P qor qnot Q) = bot .
    --- eq (P qor Q) qand (qnot P qand qnot Q) = bot .
    --- eq (P qor Q) qor (qnot P qand qnot Q) = top .

    --- Checking equivalence of two lattices
    op _=??=_ : Lattice Lattice -> Bool .
    rl [equivalent] : P =??= P => true .

    **************************************************************
    *** Implication translation to free orthomodular lattices ****
    **************************************************************
    --- Implication
    op _|->_ : Lattice Lattice -> Lattice .
    rl [imply] : P |-> Q => qnot P qor (P qand Q) .

    --- Leads-to implication
    op _|~>_ : Lattice Lattice -> Lattice .
    rl [leads-to] : P |~> Q => (qnot P qand qnot Q) qor Q .

    --- Relevance implication
    op _|->>_ : Lattice Lattice -> Lattice .
    rl [relevance] : P |->> Q => ((P qand Q) qor (qnot P qand Q)) qor (qnot P qand qnot Q) .
endm

mod FOM&FH-THEOREM is
    pr FOM .

    vars P Q R : Lattice .

    --- Commutability
    op _commutes_ : Lattice Lattice -> Bool [comm] .
    eq P commutes (qnot P) = true .
    eq P commutes (P qand Q) = true .
    eq P commutes (P qor Q) = true .
    eq (qnot P) commutes (P qand Q) = true .
    eq (P qand Q) commutes (qnot P qor qnot Q) = true .

    crl [comm1] : P qand (Q qor R) => (P qand Q) qor (P qand R) if P commutes Q /\ P commutes R /\ P =/= Q /\ P =/= R /\ Q =/= R .
    crl [comm2] : P qor (Q qand R) => (P qor Q) qand (P qor R) if P commutes Q /\ P commutes R /\ P =/= Q /\ P =/= R /\ Q =/= R .
    crl [comm3] : (P qand Q) qor (P qand R) => P qand (Q qor R) if P commutes Q /\ P commutes R /\ P =/= Q /\ P =/= R /\ Q =/= R .
    crl [comm4] : (P qor Q) qand (P qor R) => P qor (Q qand R) if P commutes Q /\ P commutes R /\ P =/= Q /\ P =/= R /\ Q =/= R .
endm

mod NORMAL-FORM is
    pr FOM-SIGNATURE .
    pr NAT .

    sort NormForm .
    sort Mo2 .
    sort BL .
    sort NFTuple .

    ops a a' b b' 1 0 : -> Mo2 [ctor] .
    ops 0 1 : -> BL [ctor] .
    ops (_,_,_,_,_) : Mo2 BL BL BL BL -> NormForm [ctor] .
    op {normForm:_, formula:_, id:_} : NormForm Lattice Nat -> NFTuple .

    --- Error handling
    op errorTuple : -> NFTuple [ctor] .

    vars A A' : Mo2 .
    vars B B1 B2 B3 B4 : BL .
    vars B' B1' B2' B3' B4' : BL .
    vars NF : NormForm .
    vars X Y L : Lattice .
    vars N : Nat .

    op getNormForm : NFTuple -> NormForm .
    op getFormula : NFTuple -> Lattice .
    op getId : NFTuple -> Nat .

    eq getNormForm({normForm: NF, formula: L, id: N}) = NF .
    eq getFormula({normForm: NF, formula: L, id: N}) = L .
    eq getId({normForm: NF, formula: L, id: N}) = N .

    --- MO2
    op _mand_ : Mo2 Mo2 -> Mo2 [comm] .
    op _mor_ : Mo2 Mo2 -> Mo2 [comm] .
    op mnot_ : Mo2 -> Mo2 .

    ceq A mand A' = A if A == A' /\ A =/= 1 /\ A =/= 0 .
    ceq A mand A' = 0 if A =/= A' /\ A =/= 1 /\ A =/= 0 /\ A' =/= 1 /\ A' =/= 0 .
    eq A mand 1 = A .
    eq A mand 0 = 0 .

    ceq A mor A' = A if A == A' /\ A =/= 1 /\ A =/= 0 .
    ceq A mor A' = 1 if A =/= A' /\ A =/= 1 /\ A =/= 0 /\ A' =/= 1 /\ A' =/= 0 .
    eq A mor 1 = 1 .
    eq A mor 0 = A .

    eq mnot 1 = 0 .
    eq mnot 0 = 1 .
    eq mnot a = a' .
    eq mnot a' = a .
    eq mnot b = b' .
    eq mnot b' = b .

    --- Bool Lattice 2^4
    op _bland_ : BL BL -> BL [comm] .
    op _blor_ : BL BL -> BL [comm] .
    op blnot_ : BL -> BL .
    eq B bland 1 = B .
    eq B bland 0 = 0 .
    eq B blor 1 = 1 .
    eq B blor 0 = B .
    eq blnot 0 = 1 .
    eq blnot 1 = 0 .

    --- Combination of elements of MO2 x 2^4
    op _nfand_ : NormForm NormForm -> NormForm .
    op _nfor_ : NormForm NormForm -> NormForm .
    op nfnot_ : NormForm -> NormForm .

    eq (A, B1, B2, B3, B4) nfand (A', B1', B2', B3', B4') = ((A mand A'), (B1 bland B1'), (B2 bland B2'), (B3 bland B3'), (B4 bland B4')) .
    eq (A, B1, B2, B3, B4) nfor (A', B1', B2', B3', B4') = ((A mor A'), (B1 blor B1'), (B2 blor B2'), (B3 blor B3'), (B4 blor B4')) .
    eq nfnot(A, B1, B2, B3, B4) = ((mnot A), (blnot B1), (blnot B2), (blnot B3), (blnot B4)) .

    ops p1 p2 p3 p4 p5 p6 p7 p8 p9
        p10 p11 p12 p13 p14 p15 p16 p17 p18 p19
        p20 p21 p22 p23 p24 p25 p26 p27 p28 p29
        p30 p31 p32 p33 p34 p35 p36 p37 p38 p39
        p40 p41 p42 p43 p44 p45 p46 p47 p48 p49
        p50 p51 p52 p53 p54 p55 p56 p57 p58 p59
        p60 p61 p62 p63 p64 p65 p66 p67 p68 p69
        p70 p71 p72 p73 p74 p75 p76 p77 p78 p79
        p80 p81 p82 p83 p84 p85 p86 p87 p88 p89
        p90 p91 p92 p93 p94 p95 p96 : -> NFTuple [ctor] .

    eq p1  = {normForm: (0, 0, 0, 0, 0), formula: bot, id: 1} [nonexec] .
    eq p2  = {normForm: (0, 1, 0, 0, 0), formula: (X qand Y), id: 2} [nonexec] .
    eq p3  = {normForm: (0, 0, 1, 0, 0), formula: (X qand qnot Y), id: 3} [nonexec] .
    eq p4  = {normForm: (0, 0, 0, 1, 0), formula: (qnot X qand Y), id: 4} [nonexec] .
    eq p5  = {normForm: (0, 0, 0, 0, 1), formula: (qnot X qand qnot Y), id: 5} [nonexec] .
    eq p6  = {normForm: (0, 1, 1, 0, 0), formula: ((X qand Y) qor (X qand qnot Y)), id: 6} [nonexec] .
    eq p7  = {normForm: (0, 1, 0, 1, 0), formula: ((X qand Y) qor (qnot X qand Y)), id: 7} [nonexec] .
    eq p8  = {normForm: (0, 1, 0, 0, 1), formula: ((X qand Y) qor (qnot X qand qnot Y)), id: 8} [nonexec] .
    eq p9  = {normForm: (0, 0, 1, 1, 0), formula: ((X qand qnot Y) qor (qnot X qand Y)), id: 9} [nonexec] .
    eq p10 = {normForm: (0, 0, 1, 0, 1), formula: ((qnot X qand qnot Y) qor (X qand qnot Y)), id: 10} [nonexec] .
    eq p11 = {normForm: (0, 0, 0, 1, 1), formula: ((qnot X qand qnot Y) qor (qnot X qand Y)), id: 11} [nonexec] .
    eq p12 = {normForm: (0, 1, 1, 1, 0), formula: ((X qand Y) qor (X qand qnot Y) qor (qnot X qand Y)), id: 12} [nonexec] .
    eq p13 = {normForm: (0, 1, 1, 0, 1), formula: ((X qand Y) qor (X qand qnot Y) qor (qnot X qand qnot Y)), id: 13} [nonexec] .
    eq p14 = {normForm: (0, 1, 0, 1, 1), formula: ((qnot X qand qnot Y) qor (qnot X qand Y) qor (X qand Y)), id: 14} [nonexec] .
    eq p15 = {normForm: (0, 0, 1, 1, 1), formula: ((qnot X qand qnot Y) qor (qnot X qand Y) qor (X qand qnot Y)), id: 15} [nonexec] .
    eq p16 = {normForm: (0, 1, 1, 1, 1), formula: ((X qand Y) qor (X qand qnot Y) qor (qnot X qand Y) qor (qnot X qand qnot Y)), id: 16} [nonexec] .

    eq p17 = {normForm: (a, 0, 0, 0, 0), formula: (X qand (qnot X qor Y) qand (qnot X qor qnot Y)), id: 17} [nonexec] .
    eq p18 = {normForm: (a, 1, 0, 0, 0), formula: (X qand (qnot X qor Y)), id: 18} [nonexec] .
    eq p19 = {normForm: (a, 0, 1, 0, 0), formula: (X qand (qnot X qor qnot Y)), id: 19} [nonexec] .
    eq p20 = {normForm: (a, 0, 0, 1, 0), formula: ((qnot X qand Y) qor (X qand (qnot X qor qnot Y) qand (qnot X qor Y))), id: 20} [nonexec] .
    eq p21 = {normForm: (a, 0, 0, 0, 1), formula: ((qnot X qand qnot Y) qor (X qand (qnot X qor Y) qand (qnot X qor qnot Y))), id: 21} [nonexec] .
    eq p22 = {normForm: (a, 1, 1, 0, 0), formula: (X), id: 22} [nonexec] .
    eq p23 = {normForm: (a, 1, 0, 1, 0), formula: ((qnot X qor Y) qand (X qor (qnot X qand Y))), id: 23} [nonexec] .
    eq p24 = {normForm: (a, 1, 0, 0, 1), formula: ((qnot X qor Y) qand (X qor (qnot X qand qnot Y))), id: 24} [nonexec] .
    eq p25 = {normForm: (a, 0, 1, 1, 0), formula: ((qnot X qor qnot Y) qand (X qor (qnot X qand Y))), id: 25} [nonexec] .
    eq p26 = {normForm: (a, 0, 1, 0, 1), formula: ((qnot X qor qnot Y) qand (X qor (qnot X qand qnot Y))), id: 26} [nonexec] .
    eq p27 = {normForm: (a, 0, 0, 1, 1), formula: ((qnot X qor qnot Y) qand (qnot X qor Y) qand (X qor (qnot X qand qnot Y) qor (qnot X qand Y))), id: 27} [nonexec] .
    eq p28 = {normForm: (a, 1, 1, 1, 0), formula: (X qor (qnot X qand Y)), id: 28} [nonexec] .
    eq p29 = {normForm: (a, 1, 1, 0, 1), formula: (X qor (qnot X qand qnot Y)), id: 29} [nonexec] .
    eq p30 = {normForm: (a, 1, 0, 1, 1), formula: ((qnot X qor Y) qand (X qor (qnot X qand qnot Y) qor (qnot X qand Y))), id: 30} [nonexec] .
    eq p31 = {normForm: (a, 0, 1, 1, 1), formula: ((qnot X qor qnot Y) qand (X qor (qnot X qand Y) qor (qnot X qand qnot Y))), id: 31} [nonexec] .
    eq p32 = {normForm: (a, 1, 1, 1, 1), formula: (X qor (qnot X qand Y) qor (qnot X qand qnot Y)), id: 32} [nonexec] .

    eq p33 = {normForm: (b, 0, 0, 0, 0), formula: (Y qand (qnot Y qor X) qand (qnot Y qor qnot X)), id: 33} [nonexec] .
    eq p34 = {normForm: (b, 1, 0, 0, 0), formula: (Y qand (qnot Y qor X)), id: 34} [nonexec] .
    eq p35 = {normForm: (b, 0, 1, 0, 0), formula: ((X qand qnot Y) qor (Y qand (qnot Y qor qnot X) qand (qnot Y qor X))), id: 35} [nonexec] .
    eq p36 = {normForm: (b, 0, 0, 1, 0), formula: (Y qand (qnot Y qor qnot X)), id: 36} [nonexec] .
    eq p37 = {normForm: (b, 0, 0, 0, 1), formula: ((qnot X qand qnot Y) qor (Y qand (qnot Y qor X) qand (qnot Y qor qnot X))), id: 37} [nonexec] .
    eq p38 = {normForm: (b, 1, 1, 0, 0), formula: ((X qor qnot Y) qand (Y qor (qnot Y qand X))), id: 38} [nonexec] .
    eq p39 = {normForm: (b, 1, 0, 1, 0), formula: (Y), id: 39} [nonexec] .
    eq p40 = {normForm: (b, 1, 0, 0, 1), formula: ((X qor qnot Y) qand (Y qor (qnot Y qand qnot X))), id: 40} [nonexec] .
    eq p41 = {normForm: (b, 0, 1, 1, 0), formula: ((qnot X qor qnot Y) qand (Y qor (qnot Y qand X))), id: 41} [nonexec] .
    eq p42 = {normForm: (b, 0, 1, 0, 1), formula: ((qnot X qor qnot Y) qand (X qor qnot Y) qand (Y qor (qnot X qand qnot Y) qor (X qand qnot Y))), id: 42} [nonexec] .
    eq p43 = {normForm: (b, 0, 0, 1, 1), formula: ((qnot X qor qnot Y) qand (Y qor (qnot Y qand qnot X))), id: 43} [nonexec] .
    eq p44 = {normForm: (b, 1, 1, 1, 0), formula: (Y qor (qnot Y qand X)), id: 44} [nonexec] .
    eq p45 = {normForm: (b, 1, 1, 0, 1), formula: ((X qor qnot Y) qand (Y qor (qnot Y qand qnot X) qor (qnot Y qand X))), id: 45} [nonexec] .
    eq p46 = {normForm: (b, 1, 0, 1, 1), formula: (Y qor (qnot Y qand qnot X)), id: 46} [nonexec] .
    eq p47 = {normForm: (b, 0, 1, 1, 1), formula: ((qnot X qor qnot Y) qand (Y qor (qnot Y qand X) qor (qnot Y qand qnot X))), id: 47} [nonexec] .
    eq p48 = {normForm: (b, 1, 1, 1, 1), formula: (Y qor (qnot Y qand X) qor (qnot Y qand qnot X)), id: 48} [nonexec] .

    eq p49 = {normForm: (b', 0, 0, 0, 0), formula: (qnot Y qand (Y qor qnot X) qand (Y qor X)), id: 49} [nonexec] .
    eq p50 = {normForm: (b', 1, 0, 0, 0), formula: ((X qand Y) qor (qnot Y qand (Y qor qnot X) qand (Y qor X))), id: 50} [nonexec] .
    eq p51 = {normForm: (b', 0, 1, 0, 0), formula: (qnot Y qand (Y qor X)), id: 51} [nonexec] .
    eq p52 = {normForm: (b', 0, 0, 1, 0), formula: ((qnot X qand Y) qor (qnot Y qand (Y qor X) qand (Y qor qnot X))), id: 52} [nonexec] .
    eq p53 = {normForm: (b', 0, 0, 0, 1), formula: (qnot Y qand (Y qor qnot X)), id: 53} [nonexec] .
    eq p54 = {normForm: (b', 1, 1, 0, 0), formula: ((X qor Y) qand (qnot Y qor (Y qand X))), id: 54} [nonexec] .
    eq p55 = {normForm: (b', 1, 0, 1, 0), formula: ((X qor Y) qand (qnot X qor Y) qand (qnot Y qor (X qand Y) qor (qnot X qand Y))), id: 55} [nonexec] .
    eq p56 = {normForm: (b', 1, 0, 0, 1), formula: ((qnot X qor Y) qand (qnot Y qor (Y qand X))), id: 56} [nonexec] .
    eq p57 = {normForm: (b', 0, 1, 1, 0), formula: ((X qor Y) qand (qnot Y qor (Y qand qnot X))), id: 57} [nonexec] .
    eq p58 = {normForm: (b', 0, 1, 0, 1), formula: (qnot Y), id: 58} [nonexec] .
    eq p59 = {normForm: (b', 0, 0, 1, 1), formula: ((qnot X qor Y) qand (qnot Y qor (Y qand qnot X))), id: 59} [nonexec] .
    eq p60 = {normForm: (b', 1, 1, 1, 0), formula: ((X qor Y) qand (qnot Y qor (Y qand qnot X) qor (Y qand X))), id: 60} [nonexec] .
    eq p61 = {normForm: (b', 1, 1, 0, 1), formula: (qnot Y qor (Y qand X)), id: 61} [nonexec] .
    eq p62 = {normForm: (b', 1, 0, 1, 1), formula: ((qnot X qor Y) qand (qnot Y qor (Y qand qnot X) qor (Y qand X))), id: 62} [nonexec] .
    eq p63 = {normForm: (b', 0, 1, 1, 1), formula: (qnot Y qor (Y qand qnot X)), id: 63} [nonexec] .
    eq p64 = {normForm: (b', 1, 1, 1, 1), formula: (qnot Y qor (Y qand qnot X) qor (Y qand X)), id: 64} [nonexec] .

    eq p65 = {normForm: (a', 0, 0, 0, 0), formula: (qnot X qand (X qor qnot Y) qand (X qor Y)), id: 65} [nonexec] .
    eq p66 = {normForm: (a', 1, 0, 0, 0), formula: ((X qand Y) qor (qnot X qand (X qor qnot Y) qand (X qor Y))), id: 66} [nonexec] .
    eq p67 = {normForm: (a', 0, 1, 0, 0), formula: ((X qand qnot Y) qor (qnot X qand (X qor Y) qand (X qor qnot Y))), id: 67} [nonexec] .
    eq p68 = {normForm: (a', 0, 0, 1, 0), formula: (qnot X qand (X qor Y)), id: 68} [nonexec] .
    eq p69 = {normForm: (a', 0, 0, 0, 1), formula: (qnot X qand (X qor qnot Y)), id: 69} [nonexec] .
    eq p70 = {normForm: (a', 1, 1, 0, 0), formula: ((X qor Y) qand (X qor qnot Y) qand (qnot X qor (X qand Y) qor (X qand qnot Y))), id: 70} [nonexec] .
    eq p71 = {normForm: (a', 1, 0, 1, 0), formula: ((X qor Y) qand (qnot X qor (X qand Y))), id: 71} [nonexec] .
    eq p72 = {normForm: (a', 1, 0, 0, 1), formula: ((X qor qnot Y) qand (qnot X qor (X qand Y))), id: 72} [nonexec] .
    eq p73 = {normForm: (a', 0, 1, 1, 0), formula: ((X qor Y) qand (qnot X qor (X qand qnot Y))), id: 73} [nonexec] .
    eq p74 = {normForm: (a', 0, 1, 0, 1), formula: ((X qor qnot Y) qand (qnot X qor (X qand qnot Y))), id: 74} [nonexec] .
    eq p75 = {normForm: (a', 0, 0, 1, 1), formula: (qnot X), id: 75} [nonexec] .
    eq p76 = {normForm: (a', 1, 1, 1, 0), formula: ((X qor Y) qand (qnot X qor (X qand qnot Y) qor (X qand Y))), id: 76} [nonexec] .
    eq p77 = {normForm: (a', 1, 1, 0, 1), formula: ((X qor qnot Y) qand (qnot X qor (X qand Y) qor (X qand qnot Y))), id: 77} [nonexec] .
    eq p78 = {normForm: (a', 1, 0, 1, 1), formula: (qnot X qor (X qand Y)), id: 78} [nonexec] .
    eq p79 = {normForm: (a', 0, 1, 1, 1), formula: (qnot X qor (X qand qnot Y)), id: 79} [nonexec] .
    eq p80 = {normForm: (a', 1, 1, 1, 1), formula: (qnot X qor (X qand qnot Y) qor (X qand Y)), id: 80} [nonexec] .

    eq p81 = {normForm: (1, 0, 0, 0, 0), formula: ((X qor Y) qand (X qor qnot Y) qand (qnot X qor Y) qand (qnot X qor qnot Y)), id: 81} [nonexec] .
    eq p82 = {normForm: (1, 1, 0, 0, 0), formula: ((X qor Y) qand (X qor qnot Y) qand (qnot X qor Y)), id: 82} [nonexec] .
    eq p83 = {normForm: (1, 0, 1, 0, 0), formula: ((X qor Y) qand (X qor qnot Y) qand (qnot X qor qnot Y)), id: 83} [nonexec] .
    eq p84 = {normForm: (1, 0, 0, 1, 0), formula: ((qnot X qor qnot Y) qand (qnot X qor Y) qand (X qor Y)), id: 84} [nonexec] .
    eq p85 = {normForm: (1, 0, 0, 0, 1), formula: ((qnot X qor qnot Y) qand (qnot X qor Y) qand (X qor qnot Y)), id: 85} [nonexec] .
    eq p86 = {normForm: (1, 1, 1, 0, 0), formula: ((X qor Y) qand (X qor qnot Y)), id: 86} [nonexec] .
    eq p87 = {normForm: (1, 1, 0, 1, 0), formula: ((X qor Y) qand (qnot X qor Y)), id: 87} [nonexec] .
    eq p88 = {normForm: (1, 1, 0, 0, 1), formula: ((qnot X qor Y) qand (X qor qnot Y)), id: 88} [nonexec] .
    eq p89 = {normForm: (1, 0, 1, 1, 0), formula: ((X qor Y) qand (qnot X qor qnot Y)), id: 89} [nonexec] .
    eq p90 = {normForm: (1, 0, 1, 0, 1), formula: ((qnot X qor qnot Y) qand (X qor qnot Y)), id: 90} [nonexec] .
    eq p91 = {normForm: (1, 0, 0, 1, 1), formula: ((qnot X qor qnot Y) qand (qnot X qor Y)), id: 91} [nonexec] .
    eq p92 = {normForm: (1, 1, 1, 1, 0), formula: (X qor Y), id: 92} [nonexec] .
    eq p93 = {normForm: (1, 1, 1, 0, 1), formula: (X qor qnot Y), id: 93} [nonexec] .
    eq p94 = {normForm: (1, 1, 0, 1, 1), formula: (qnot X qor Y), id: 94} [nonexec] .
    eq p95 = {normForm: (1, 0, 1, 1, 1), formula: (qnot X qor qnot Y), id: 95} [nonexec] .
    eq p96 = {normForm: (1, 1, 1, 1, 1), formula: (top), id: 96} [nonexec] .
endm

view NFTuple from TRIV to NORMAL-FORM is
    sort Elt to NFTuple .
endv

mod NORMAL-FORM-BUILDER is
    pr META-LEVEL .
    pr LIST{NFTuple} * (
        sort NeList{NFTUPLE} to NeNFList,
        sort List{NFTuple} to NFList
    ) .

    vars M : Module .
    vars E : Equation .
    vars ES : EquationSet .
    vars T T1 T2 : Term .
    vars TL : TermList .
    vars AS : AttrSet .
    vars NFT NFT' NFT1 NFT2 : NFTuple .
    vars NFL NFL' : NFList .
    vars NF : NormForm .
    vars L : Lattice .
    vars N : Nat .

    --- Extracting a term list form 96 normal forms defined
    op extractNormFormTL : Module -> TermList .
    eq extractNormFormTL(M) = extractNormFormTL*(getEqs(M)) .

    op extractNormFormTL* : EquationSet -> TermList .
    eq extractNormFormTL*(E ES) = extractNormFormTL**(E), extractNormFormTL*(ES) .
    eq extractNormFormTL*(none) = empty .

    op extractNormFormTL** : Equation -> Term .
    eq extractNormFormTL**(eq T1 = T2 [nonexec AS] .) = T2 .
    eq extractNormFormTL**(E) = empty [owise] .

    op convert2NFList : TermList -> NFList .
    eq convert2NFList((T, TL)) = downTerm(T, errorTuple) convert2NFList(TL) .
    eq convert2NFList(empty) = nil .

    --- Containing 96 normal forms in a list
    op NF-LIST : -> NFList [memo] .
    eq NF-LIST = convert2NFList(extractNormFormTL(upModule('NORMAL-FORM, false))) .

    --- Finding a normal form tuple by a normal form
    op findNFTupleByNF : NormForm NFList -> NFTuple .
    eq findNFTupleByNF(NF, NFT NFL) = if isMatchedNF(NF, NFT)
                                    then NFT
                                    else findNFTupleByNF(NF, NFL)
                                    fi .
    eq findNFTupleByNF(NF, nil) = errorTuple .

    op isMatchedNF : NormForm NFTuple -> Bool .
    eq isMatchedNF(NF, {normForm: NF, formula: L, id: N}) = true .
    eq isMatchedNF(NF, NFT) = false [owise] .

    --- Finding a normal form tuple by a formula
    op findNFTupleByFormula : Lattice NFList -> NFTuple .
    eq findNFTupleByFormula(L, NFT NFL) = if isMatchedFormula(L, NFT)
                                        then NFT
                                        else findNFTupleByFormula(L, NFL)
                                        fi .
    eq findNFTupleByFormula(L, nil) = errorTuple .
    op isMatchedFormula : Lattice NFTuple -> Bool .
    eq isMatchedFormula(L, {normForm: NF, formula: L, id: N}) = true .
    eq isMatchedFormula(L, NFT) = false [owise] .

    --- Building conjunction equations
    op conjBuilder : NFList -> EquationSet [memo] .
    eq conjBuilder(NFL) = conjBuilder*(NFL, NFL) .
    op conjBuilder* : NFList NFList -> EquationSet .
    eq conjBuilder*(NFL, NFT NFL') = conjBuilder**(NFL, NFT, NFL) conjBuilder*(NFL, NFL') .
    eq conjBuilder*(NFL, nil) = none .

    op conjBuilder** : NFList NFTuple NFList -> EquationSet .
    eq conjBuilder**(NFL, NFT1, NFT2 NFL') = conjBuilder**$(NFL, NFT1, NFT2) conjBuilder**(NFL, NFT1, NFL') .
    eq conjBuilder**(NFL, NFT1, nil) = none .

    op conjBuilder**$ : NFList NFTuple NFTuple -> Equation .
    ceq conjBuilder**$(NFL, NFT1, NFT2) = (eq upTerm(getFormula(NFT1) qand getFormula(NFT2)) = upTerm(getFormula(NFT)) [none] .)
    if NF := (getNormForm(NFT1) nfand getNormForm(NFT2))
    /\ NFT := findNFTupleByNF(NF, NFL) .

    --- Building disjuntion equations
    op disjBuilder : NFList -> EquationSet [memo] .
    eq disjBuilder(NFL) = disjBuilder*(NFL, NFL) .
    op disjBuilder* : NFList NFList -> EquationSet .
    eq disjBuilder*(NFL, NFT NFL') = disjBuilder**(NFL, NFT, NFL) disjBuilder*(NFL, NFL') .
    eq disjBuilder*(NFL, nil) = none .

    op disjBuilder** : NFList NFTuple NFList -> EquationSet .
    eq disjBuilder**(NFL, NFT1, NFT2 NFL') = disjBuilder**$(NFL, NFT1, NFT2) disjBuilder**(NFL, NFT1, NFL') .
    eq disjBuilder**(NFL, NFT1, nil) = none .

    op disjBuilder**$ : NFList NFTuple NFTuple -> Equation .
    ceq disjBuilder**$(NFL, NFT1, NFT2) = (eq upTerm(getFormula(NFT1) qor getFormula(NFT2)) = upTerm(getFormula(NFT)) [ none ] .)
    if NF := (getNormForm(NFT1) nfor getNormForm(NFT2))
    /\ NFT := findNFTupleByNF(NF, NFL) .

    --- Building disjuntion equations
    op negBuilder : NFList -> EquationSet [memo] .
    eq negBuilder(NFL) = negBuilder*(NFL, NFL) .
    op negBuilder* : NFList NFList -> EquationSet .
    eq negBuilder*(NFL, NFT NFL') = negBuilder**(NFL, NFT) negBuilder*(NFL, NFL') .
    eq negBuilder*(NFL, nil) = none .

    op negBuilder** : NFList NFTuple -> Equation .
    ceq negBuilder**(NFL, NFT) = (eq upTerm(qnot getFormula(NFT)) = upTerm(getFormula(NFT')) [none] .)
    if NF := nfnot(getNormForm(NFT))
    /\ NFT' := findNFTupleByNF(NF, NFL) .

    --- Filter unnecessary equations
    op filterEqs : EquationSet -> EquationSet .
    eq filterEqs(E ES) = filterEqs*(E) filterEqs(ES) .
    eq filterEqs(none) = none .

    op filterEqs* : Equation -> Equation .
    eq filterEqs*(eq T = T [AS] .) = none .
    eq filterEqs*(E) = E [owise] .

    --- Size of an equation set
    op sizeEqs : EquationSet -> Nat .
    eq sizeEqs(E ES) = sizeEqs(ES) + 1 .
    eq sizeEqs(none) = 0 .
endm

in full-maude .

mod FOM-TEST is
    protecting FOM&FH-THEOREM .

    ops a b c p q r : -> Lattice .
endm

mod FOM-FULL is
    pr FOM-TEST .
    pr NORMAL-FORM-BUILDER .
    pr FM-UNIT .
    pr FM-MODULE-HANDLING .

    op NF-EQS : -> EquationSet .
    eq NF-EQS = filterEqs(
        conjBuilder(NF-LIST)
        disjBuilder(NF-LIST)
        negBuilder(NF-LIST)
    ) .

    op FOM-FULL : -> Module .
    --- Using FH theorem & 96 normal forms
    eq FOM-FULL = addEqs(NF-EQS, upModule('FOM-TEST, false)) .
    --- Using FH theorem only
    --- eq FOM-FULL = upModule('FOM-TEST, false) .

    vars L1 L2 : Lattice .
    vars T1 T2 : Term .
    vars RT? : ResultTriple? .
    vars M : Module .

    --- Checking equivalence between formulae in FOM-FULL
    op _=?=_ : Lattice Lattice -> Bool .
    ceq L1 =?= L2 = if RT? == failure then false else true fi
    if T1 := upTerm(L1 =??= L2)
    /\ T2 := upTerm(true)
    /\ M := FOM-FULL
    /\ RT? := metaSearch(M, T1, T2, nil, '*, unbounded, 0) .
endm

--- [o] Verification of Q1 of quasi-implicaiton algebra
--- red (a |-> b) |-> a =?= a .

--- [o] Verification of Q2 of quasi-implicaiton algebra
--- red (a |-> b) |-> (a |-> c) =?= (b |-> a) |-> (b |-> c) .

--- [o] Verification of Q3 of quasi-implicaiton algebra
--- red ((a |-> b) |-> (b |-> a)) |-> a =?= ((b |-> a) |-> (a |-> b)) |-> b .

--- [o] Verification of O2 of ortho-implicaiton algebra
--- red p |~> ((q |~> p) |~> r) =?= p |~> r .

--- [o] Verification of O5 of orthomodular implication algebra
--- red (((p |~> q) |~> q) |~> r) |~> (p |~> r) =?= top .

--- [?] Verification of O6 of orthomodular implication algebra
--- red ((((((((((p |~> q) |~> q) |~> r) |~> r) |~> r) |~> p) |~> p) |~> r) |~> p) |~> p) =?= (((p |~> q) |~> q) |~> r) |~> r .

--- [o] Verification of J4 of Sasaki implication algebra
--- red p |-> ((p |-> ((q |-> ((q |-> r) |-> bot)) |-> bot)) |-> bot) =?= r |-> ((r |-> ((p |-> ((p |-> q) |-> bot)) |-> bot)) |-> bot) .

--- [o] Verification of K5 of Dishkant implication algebra
--- red (((p |~> q) |~> q) |~> r) |~> r =?= (p |~> ((q |~> r) |~> r)) |~> ((q |~> r) |~> r) .

--- [?] Verification of L6 of Relevance implicaiton algebra
--- red (((p |->> q) |->> q) |->> r) |->> r =?= (p |->> ((q |->> r) |->> r)) |->> ((q |->> r) |->> r) .